import React, { useState, useEffect } from 'react';
import { walletAPI, withdrawalAPI } from '../services/api';
import { Wallet as WalletType, WithdrawalResponse } from '../types';
import { useAuth } from '../contexts/AuthContext';
import { 
  DollarSign, 
  TrendingUp, 
  Download, 
  Upload,
  Plus,
  Minus,
  Calendar,
  Clock,
  AlertCircle,
  Wallet as WalletIcon,
  Sparkles,
  ArrowUpRight,
  ArrowDownRight,
  Shield,
  Leaf,
  Zap,
  Banknote,
  HelpCircle,
  Info,
  X,
  Lightbulb
} from 'lucide-react';
import toast from 'react-hot-toast';
import WalletFundingModal from '../components/WalletFundingModal';
import WalletWithdrawalModal from '../components/WalletWithdrawalModal';

const Wallet: React.FC = () => {
  const { user } = useAuth();
  const [wallet, setWallet] = useState<WalletType | null>(null);
  const [walletHistory, setWalletHistory] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [showWalletFundingModal, setShowWalletFundingModal] = useState(false);
  const [showWithdraw, setShowWithdraw] = useState(false);
  const [withdrawalCapInfo, setWithdrawalCapInfo] = useState<{
    monthlyCap: number;
    totalWithdrawnThisMonth: number;
    remainingAmount: number;
    currentMonth: string;
  } | null>(null);
  const [displayedTransactions, setDisplayedTransactions] = useState<number>(5);
  const [showViewMore, setShowViewMore] = useState<boolean>(false);
  const [showInfoPopup, setShowInfoPopup] = useState<boolean>(false);
  const [infoContent, setInfoContent] = useState<{title: string, content: string}>({title: '', content: ''});

  useEffect(() => {
    fetchWalletData();
  }, [user]); // Add user as dependency

  // Info popup helper function
  const showInfo = (title: string, content: string) => {
    setInfoContent({ title, content });
    setShowInfoPopup(true);
  };

  // Info content definitions
  const infoDefinitions = {
    balance: {
      title: "Wallet Balance",
      content: "Your current available balance in real money (₹). This includes Energy Rewards from solar projects, added funds, and minus any withdrawals or investments. This is actual money that can be withdrawn."
    },
    totalEarnings: {
      title: "Total Earnings",
      content: "The total amount of real money you've earned from solar energy production. This is calculated as ₹5 per kWh of energy generated by your investments. These earnings are added to your wallet balance."
    },
    totalInvested: {
      title: "Total Invested",
      content: "The total amount of real money you've invested in solar projects. This includes all your subscription contributions and represents your actual financial investment in clean energy."
    },
    monthlyIncome: {
      title: "Monthly Income",
      content: "Your estimated monthly income from solar energy production. This is calculated based on your current investments and projected energy generation. This is real money that gets added to your wallet."
    },
    withdrawalCap: {
      title: "Withdrawal Cap",
      content: "The maximum amount you can withdraw per month. This is a security measure to prevent excessive withdrawals. The cap resets every month and is set by the system administrators."
    }
  };

  const fetchWalletData = async () => {
    try {
      setLoading(true);
      const timestamp = Date.now();
      const [walletData, historyData] = await Promise.all([
        walletAPI.getWallet(),
        walletAPI.getWalletHistory()
      ]);
      
      setWallet(walletData.data);
      
      // Sort transactions by date (most recent first) and set wallet history
      const sortedHistory = historyData.data.sort((a: any, b: any) => {
        // Try multiple possible date field names
        const getDateValue = (transaction: any) => {
          const dateField = transaction.date || transaction.createdAt || transaction.timestamp || transaction.transactionDate;
          if (!dateField) return 0;
          
          const parsedDate = new Date(dateField);
          return isNaN(parsedDate.getTime()) ? 0 : parsedDate.getTime();
        };
        
        const dateA = getDateValue(a);
        const dateB = getDateValue(b);
        
        // If both have valid dates, sort by date
        if (dateA > 0 && dateB > 0) {
          return dateB - dateA; // Most recent first
        }
        
        // If dates are not available, fall back to ID sorting (assuming newer transactions have higher IDs)
        if (a.id && b.id) {
          return b.id - a.id;
        }
        
        // If no sorting criteria available, maintain original order
        return 0;
      });
      
      setWalletHistory(sortedHistory);
      
      // Set initial display state for transactions
      if (sortedHistory.length > 5) {
        setDisplayedTransactions(5);
        setShowViewMore(true);
      } else {
        setDisplayedTransactions(sortedHistory.length);
        setShowViewMore(false);
      }
      
      // Fetch withdrawal cap info
      try {
        const capResponse = await withdrawalAPI.getWithdrawalCapInfo();
        setWithdrawalCapInfo(capResponse.data);
      } catch (error) {
        console.error('Failed to fetch withdrawal cap info:', error);
      }
      
    } catch (error) {
      console.error('Error fetching wallet data:', error);
      toast.error('Failed to fetch wallet data');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  return (
    <div key={user?.id} className="space-y-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2 flex items-center">
          <WalletIcon className="h-8 w-8 text-green-600 mr-3" />
          Main Wallet
          <button
            onClick={() => showInfo("Main Wallet", "Your main wallet contains real money (₹) from Energy Rewards, added funds, and investments. This is actual money that can be withdrawn to your bank account. This is different from Green Credits which are environmental points.")}
            className="ml-3 text-blue-500 hover:text-blue-700 transition-colors"
            title="What is the Main Wallet?"
          >
            <Lightbulb className="w-6 h-6" />
          </button>
        </h1>
        <p className="text-gray-600">Manage your real money earnings from solar energy generation</p>
      </div>

      {/* Wallet Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="card bg-gradient-to-br from-green-50 to-emerald-50 border-green-200 hover:shadow-lg transition-all duration-300">
          <div className="flex items-center">
            <div className="p-3 bg-green-100 rounded-xl">
              <Leaf className="h-6 w-6 text-green-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 flex items-center">
                Wallet Balance
                <button
                  onClick={() => showInfo(infoDefinitions.balance.title, infoDefinitions.balance.content)}
                  className="ml-2 text-blue-500 hover:text-blue-700 transition-colors"
                  title="What is Wallet Balance?"
                >
                  <HelpCircle className="w-4 h-4" />
                </button>
              </p>
              <p className="text-2xl font-bold text-gray-900">
                ₹{wallet?.balance?.toLocaleString() || '0'}
              </p>
            </div>
          </div>
        </div>

        <div className="card bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200 hover:shadow-lg transition-all duration-300">
          <div className="flex items-center">
            <div className="p-3 bg-blue-100 rounded-xl">
              <TrendingUp className="h-6 w-6 text-blue-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 flex items-center">
                Total Earnings
                <button
                  onClick={() => showInfo(infoDefinitions.totalEarnings.title, infoDefinitions.totalEarnings.content)}
                  className="ml-2 text-blue-500 hover:text-blue-700 transition-colors"
                  title="What are Total Earnings?"
                >
                  <HelpCircle className="w-4 h-4" />
                </button>
              </p>
              <p className="text-2xl font-bold text-gray-900">
                ₹{wallet?.totalEarnings?.toLocaleString() || '0'}
              </p>
            </div>
          </div>
        </div>



        <div className="card bg-gradient-to-br from-purple-50 to-violet-50 border-purple-200 hover:shadow-lg transition-all duration-300">
          <div className="flex items-center">
            <div className="p-3 bg-purple-100 rounded-xl">
              <Upload className="h-6 w-6 text-purple-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600 flex items-center">
                Total Invested
                <button
                  onClick={() => showInfo(infoDefinitions.totalInvested.title, infoDefinitions.totalInvested.content)}
                  className="ml-2 text-blue-500 hover:text-blue-700 transition-colors"
                  title="What is Total Invested?"
                >
                  <HelpCircle className="w-4 h-4" />
                </button>
              </p>
              <p className="text-2xl font-bold text-gray-900">
                ₹{wallet?.totalInvested?.toLocaleString() || '0'}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* KYC Status Alert */}
      {user && user.kycStatus !== 'APPROVED' && (
        <div className="card bg-gradient-to-r from-yellow-50 to-orange-50 border-yellow-200">
          <div className="flex items-center">
            <div className="p-2 bg-yellow-100 rounded-lg">
              <AlertCircle className="h-5 w-5 text-yellow-600" />
            </div>
            <div className="ml-4">
              <h3 className="text-sm font-medium text-yellow-800">
                KYC Verification Required
              </h3>
              <p className="text-sm text-yellow-700 mt-1">
                {user.kycStatus === 'PENDING' 
                  ? 'Your KYC is under review. You can add funds but withdrawals are disabled until approved.'
                  : 'Please complete your KYC verification to enable withdrawals and gifts.'
                }
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="card">
        <div className="text-center mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-2">Quick Actions</h2>
          <p className="text-gray-600">Add funds or withdraw your earnings</p>
        </div>
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={() => setShowWalletFundingModal(true)}
            className="group relative overflow-hidden rounded-xl bg-gradient-to-r from-green-600 to-green-700 p-4 text-white hover:from-green-700 hover:to-green-800 transition-all duration-300 transform hover:scale-105"
          >
            <div className="absolute inset-0 bg-gradient-to-r from-green-400/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <div className="relative z-10 flex items-center justify-center">
              <Plus className="h-5 w-5 mr-2" />
              Add Funds
            </div>
          </button>
          
          <button
            onClick={() => setShowWithdraw(true)}
            disabled={!user || user.kycStatus !== 'APPROVED'}
            className={`group relative overflow-hidden rounded-xl p-4 transition-all duration-300 transform ${
              user && user.kycStatus === 'APPROVED' 
                ? 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 hover:scale-105 text-white' 
                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }`}
          >
            <div className={`absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 ${
              user && user.kycStatus === 'APPROVED' ? 'bg-gradient-to-r from-blue-400/20 to-transparent' : ''
            }`}></div>
            <div className="relative z-10 flex items-center justify-center">
              <Minus className="h-5 w-5 mr-2" />
              Withdraw
              {user && user.kycStatus !== 'APPROVED' && (
                <span className="ml-2 text-xs">(KYC Required)</span>
              )}
            </div>
          </button>
        </div>
      </div>

      {/* Wallet History */}
      <div className="card">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-xl font-bold text-gray-900 flex items-center">
              <Clock className="h-6 w-6 text-green-600 mr-3" />
              Transaction History
            </h2>
            <p className="text-gray-600">Track all your wallet activities and financial transactions</p>
          </div>
          <div className="p-3 bg-green-100 rounded-lg">
            <Clock className="h-6 w-6 text-green-600" />
          </div>
        </div>
        
        {walletHistory.length > 0 && (
          <div className="mb-4 p-3 bg-gray-50 rounded-lg">
            <p className="text-sm text-gray-600">
              Showing {displayedTransactions} of {walletHistory.length} transactions
            </p>
          </div>
        )}
        
        {walletHistory.length > 0 ? (
          <div className="space-y-4">
            {walletHistory.slice(0, displayedTransactions).map((transaction, index) => (
              <div 
                key={`${transaction.id}-${transaction.direction}-${index}`} 
                className="group border border-gray-200 rounded-xl p-4 hover:shadow-md transition-all duration-300 hover:border-primary-200"
                style={{ animationDelay: `${index * 100}ms` }}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className={`p-2 rounded-lg transition-colors duration-300 ${
                      transaction.direction === 'INCOMING' 
                        ? 'bg-green-100 group-hover:bg-green-50' 
                        : 'bg-red-100 group-hover:bg-red-50'
                    }`}>
                      {transaction.direction === 'INCOMING' ? (
                        <ArrowUpRight className="h-5 w-5 text-green-600" />
                      ) : (
                        <ArrowDownRight className="h-5 w-5 text-red-600" />
                      )}
                    </div>
                    <div>
                      <p className="text-sm font-semibold text-gray-900">
                        {transaction.transactionType === 'ADD_FUNDS' && 'Funds Added'}
                        {transaction.transactionType === 'ADMIN_CREDIT' && 'Admin Credit'}
                        {transaction.transactionType === 'WITHDRAWAL' && 'Withdrawal'}
                        {transaction.transactionType === 'SUBSCRIPTION' && 'Project Investment'}
                        {transaction.transactionType === 'ENERGY_REWARD' && (
                          <span className="flex items-center">
                            <Sparkles className="h-4 w-4 mr-1 text-yellow-500" />
                            Energy Reward
                            <span className="ml-2 text-xs bg-yellow-100 text-yellow-700 px-2 py-1 rounded-full">
                              Featured Above
                            </span>
                          </span>
                        )}
                        {transaction.transactionType === 'INVESTMENT' && 'Investment'}
                        {transaction.transactionType === 'REINVEST' && 'Reinvestment'}
                        {transaction.transactionType === 'DONATE' && 'Donation'}
                        {transaction.transactionType === 'GIFT' && (transaction.direction === 'INCOMING' ? 'Gift Received' : 'Gift Sent')}
                      </p>
                      <p className="text-xs text-gray-500">
                        {transaction.project && `${transaction.project} • `}
                        {new Date(transaction.date).toLocaleDateString()} • {new Date(transaction.date).toLocaleTimeString()}
                      </p>
                      {transaction.notes && (
                        <p className="text-xs text-gray-600 mt-1">{transaction.notes}</p>
                      )}
                      {transaction.kwh && (
                        <p className="text-xs text-blue-600 mt-1">{transaction.kwh} kWh generated</p>
                      )}
                    </div>
                  </div>
                  <div className="text-right">
                    <p className={`text-lg font-bold ${
                      transaction.direction === 'INCOMING' ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {transaction.direction === 'INCOMING' ? '+' : '-'}₹{transaction.amount.toLocaleString()}
                    </p>
                    {transaction.status && (
                      <p className={`text-xs ${
                        transaction.status === 'SUCCESS' ? 'text-green-600' : 'text-yellow-600'
                      }`}>
                        {transaction.status}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
            {showViewMore && displayedTransactions < walletHistory.length && (
              <button
                onClick={() => {
                  const newCount = Math.min(displayedTransactions + 5, walletHistory.length);
                  setDisplayedTransactions(newCount);
                  if (newCount >= walletHistory.length) {
                    setShowViewMore(false);
                  }
                }}
                className="w-full btn-primary mt-4"
              >
                View More
              </button>
            )}
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="p-4 bg-gray-100 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <WalletIcon className="h-8 w-8 text-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">No transaction history yet</h3>
            <p className="text-gray-600">
              Start using your wallet to see your transaction history here.
            </p>
          </div>
        )}
      </div>

      {/* Enhanced Wallet Funding Modal */}
      {showWalletFundingModal && (
        <WalletFundingModal
          onClose={() => {
            setShowWalletFundingModal(false);
            // Refresh wallet data after funding
            fetchWalletData();
          }}
          currentBalance={wallet?.balance || 0}
          onWalletUpdate={(amount) => {
            // Update local wallet balance immediately for better UX
            if (wallet) {
              setWallet({
                ...wallet,
                balance: wallet.balance + amount
              });
            }
            // Don't refresh from server to avoid modal reset
            // Server refresh will happen when modal closes
          }}
        />
      )}

      {/* Withdraw Modal */}
      {showWithdraw && (
        <WalletWithdrawalModal
          onClose={() => {
            setShowWithdraw(false);
            // Refresh wallet data after modal closes
            fetchWalletData();
          }}
          currentBalance={wallet?.balance || 0}
          onWalletUpdate={(amount) => {
            // Update local wallet balance immediately for better UX
            if (wallet) {
              setWallet({
                ...wallet,
                balance: wallet.balance + amount
              });
            }
            // Don't refresh from server immediately to avoid modal reset
            // Server refresh will happen when modal closes
          }}
        />
      )}

      {/* Info Popup Modal */}
      {showInfoPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center">
                <Info className="w-6 h-6 text-green-600 mr-3" />
                <h3 className="text-xl font-bold text-gray-900">{infoContent.title}</h3>
              </div>
              <button
                onClick={() => setShowInfoPopup(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            <div className="text-gray-700 leading-relaxed">
              {infoContent.content}
            </div>
            <div className="mt-6 flex justify-end">
              <button
                onClick={() => setShowInfoPopup(false)}
                className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors"
              >
                Got it!
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Wallet; 